# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Macbook pool

resources:
  repositories:
    - repository: build-templates
      type: git
      name: Webs/build-templates
    - repository: Infrastructure
      type: git
      name: Webs/Infrastructure

variables:
  - name: appName
    value: $(Build.DefinitionName)
  - name: appNamespace
    value: "default"
  - name: appMajorMinorVersion
    value: "1.0.0"
  - name: azureSubscription
    value: "$(AZSUBSCRIPTION)"
  - name: containerRegistry
    value: "$(REGISTRY)"
  - name: dockerfilePath
    value: "$(Build.SourcesDirectory)/Dockerfile"
  - name: dockerRegistryServiceConnection
    value: "AzureServiceRegistry"
  - name: imageRepository
    value: "$(appName)"
  - name: tag
    value: "$(appMajorMinorVersion).$(Build.BuildId)-$(Build.BuildNumber)"
  - name: kubernetesConnectionType
    value: "$(kubeConnectionType)"
  - name: kubernetesManifests
    value: "$(manifests)"
  - name: kubernetesContainers
    value: "$(containers)"
  - name: kubernetesServiceConnection
    value: "$(kubeServiceConnection)"
  - name: kubernetesNamespace
    value: "$(kubeNamespace)"

stages:
  - stage: CreateTag
    displayName: Create tag
    jobs:
    - job: CreateTag
      steps:
      - task: VariableTransformTask@2
        inputs:
          value: '$(Build.SourceVersion)'
          variableName: 'Build.BuildNumber'
          IsOutput: true
          substring: true
          substringType: 'left'
          substringLength: '7'

  - stage: BuildAndPushDockerImage
    displayName: Build and push Docker image
    dependsOn: CreateTag
    condition: succeeded()
    jobs:
    - job: Build
      displayName: Build and push
      steps:
      - checkout: self
        clean: false
        submodules: true
      - task: printAllVariables@1
      - task: Yarn@3
        name: Install
        displayName: Install
        inputs:
          arguments: 'install --frozen-lockfile'
      - task: Yarn@3
        name: Build
        displayName: Build
        env:
          BUILD_ID: $(tag)
        inputs:
          arguments: 'build'
      - task: AzureCLI@2
        name: setExtensionUseDynamicInstall
        displayName: Set Extension Use Dynamic Install
        inputs:
          connectedServiceNameARM: $(azureSubscription)
          scriptType: 'bash'
          scriptLocation: inlineScript
          inlineScript: 'az config set extension.use_dynamic_install=yes_without_prompt'
      - task: Docker@2
        displayName: Build a container image
        inputs:
          command: build
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)
          arguments: '--build-arg BUILD_ID=$(Build.BuildId) --platform=linux/amd64'
      - task: Docker@2
        displayName: Push an image to container registry
        inputs:
          command: push
          repository: $(imageRepository)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)
  - stage: Deploy
    displayName: Deploy to Kubernetes
    dependsOn: BuildAndPushDockerImage
    condition: succeeded()
    jobs:
      - job: Deploy
        displayName: Deplouy to kubernetes
        steps:
        - checkout: self
        - checkout: Infrastructure
          clean: false
          submodules: true
        - task: Bash@3
          displayName: Set correct tag
          inputs:
            targetType: inline
            script: cat $(kubernetesManifests) | sed "s/{{VERSION}}/$(tag)/g"
        - task: KubernetesManifest@1
          inputs:
            action: 'deploy'
            connectionType: "$(kubernetesConnectionType)"
            kubernetesServiceConnection: "$(kubernetesServiceConnection)"
            namespace: "$(kubernetesNamespace)"
            manifests: "$(kubernetesManifests)"
            containers: "$(kubernetesContainers)"